// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/metrics/metrics.go

// Package mock_metrics is a generated GoMock package.
package mock_metrics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// IncFailCreateAppointmentCounter mocks base method.
func (m *MockMetrics) IncFailCreateAppointmentCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncFailCreateAppointmentCounter")
}

// IncFailCreateAppointmentCounter indicates an expected call of IncFailCreateAppointmentCounter.
func (mr *MockMetricsMockRecorder) IncFailCreateAppointmentCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncFailCreateAppointmentCounter", reflect.TypeOf((*MockMetrics)(nil).IncFailCreateAppointmentCounter))
}

// IncFailMultiCreateAppointmentCounter mocks base method.
func (m *MockMetrics) IncFailMultiCreateAppointmentCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncFailMultiCreateAppointmentCounter")
}

// IncFailMultiCreateAppointmentCounter indicates an expected call of IncFailMultiCreateAppointmentCounter.
func (mr *MockMetricsMockRecorder) IncFailMultiCreateAppointmentCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncFailMultiCreateAppointmentCounter", reflect.TypeOf((*MockMetrics)(nil).IncFailMultiCreateAppointmentCounter))
}

// IncFailRemoveAppointmentCounter mocks base method.
func (m *MockMetrics) IncFailRemoveAppointmentCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncFailRemoveAppointmentCounter")
}

// IncFailRemoveAppointmentCounter indicates an expected call of IncFailRemoveAppointmentCounter.
func (mr *MockMetricsMockRecorder) IncFailRemoveAppointmentCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncFailRemoveAppointmentCounter", reflect.TypeOf((*MockMetrics)(nil).IncFailRemoveAppointmentCounter))
}

// IncFailUpdateAppointmentCounter mocks base method.
func (m *MockMetrics) IncFailUpdateAppointmentCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncFailUpdateAppointmentCounter")
}

// IncFailUpdateAppointmentCounter indicates an expected call of IncFailUpdateAppointmentCounter.
func (mr *MockMetricsMockRecorder) IncFailUpdateAppointmentCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncFailUpdateAppointmentCounter", reflect.TypeOf((*MockMetrics)(nil).IncFailUpdateAppointmentCounter))
}

// IncSuccessCreateAppointmentCounter mocks base method.
func (m *MockMetrics) IncSuccessCreateAppointmentCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncSuccessCreateAppointmentCounter")
}

// IncSuccessCreateAppointmentCounter indicates an expected call of IncSuccessCreateAppointmentCounter.
func (mr *MockMetricsMockRecorder) IncSuccessCreateAppointmentCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncSuccessCreateAppointmentCounter", reflect.TypeOf((*MockMetrics)(nil).IncSuccessCreateAppointmentCounter))
}

// IncSuccessMultiCreateAppointmentCounter mocks base method.
func (m *MockMetrics) IncSuccessMultiCreateAppointmentCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncSuccessMultiCreateAppointmentCounter")
}

// IncSuccessMultiCreateAppointmentCounter indicates an expected call of IncSuccessMultiCreateAppointmentCounter.
func (mr *MockMetricsMockRecorder) IncSuccessMultiCreateAppointmentCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncSuccessMultiCreateAppointmentCounter", reflect.TypeOf((*MockMetrics)(nil).IncSuccessMultiCreateAppointmentCounter))
}

// IncSuccessRemoveAppointmentCounter mocks base method.
func (m *MockMetrics) IncSuccessRemoveAppointmentCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncSuccessRemoveAppointmentCounter")
}

// IncSuccessRemoveAppointmentCounter indicates an expected call of IncSuccessRemoveAppointmentCounter.
func (mr *MockMetricsMockRecorder) IncSuccessRemoveAppointmentCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncSuccessRemoveAppointmentCounter", reflect.TypeOf((*MockMetrics)(nil).IncSuccessRemoveAppointmentCounter))
}

// IncSuccessUpdateAppointmentCounter mocks base method.
func (m *MockMetrics) IncSuccessUpdateAppointmentCounter() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncSuccessUpdateAppointmentCounter")
}

// IncSuccessUpdateAppointmentCounter indicates an expected call of IncSuccessUpdateAppointmentCounter.
func (mr *MockMetricsMockRecorder) IncSuccessUpdateAppointmentCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncSuccessUpdateAppointmentCounter", reflect.TypeOf((*MockMetrics)(nil).IncSuccessUpdateAppointmentCounter))
}
