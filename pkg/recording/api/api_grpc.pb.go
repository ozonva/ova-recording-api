// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordingServiceClient is the client API for RecordingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordingServiceClient interface {
	CreateAppointmentV1(ctx context.Context, in *CreateAppointmentV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DescribeAppointmentV1(ctx context.Context, in *DescribeAppointmentV1Request, opts ...grpc.CallOption) (*Appointment, error)
	ListAppointmentsV1(ctx context.Context, in *ListAppointmentsV1Request, opts ...grpc.CallOption) (*ListAppointmentsV1Response, error)
	RemoveAppointmentV1(ctx context.Context, in *RemoveAppointmentV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type recordingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordingServiceClient(cc grpc.ClientConnInterface) RecordingServiceClient {
	return &recordingServiceClient{cc}
}

func (c *recordingServiceClient) CreateAppointmentV1(ctx context.Context, in *CreateAppointmentV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.recording.api.RecordingService/CreateAppointmentV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingServiceClient) DescribeAppointmentV1(ctx context.Context, in *DescribeAppointmentV1Request, opts ...grpc.CallOption) (*Appointment, error) {
	out := new(Appointment)
	err := c.cc.Invoke(ctx, "/ova.recording.api.RecordingService/DescribeAppointmentV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingServiceClient) ListAppointmentsV1(ctx context.Context, in *ListAppointmentsV1Request, opts ...grpc.CallOption) (*ListAppointmentsV1Response, error) {
	out := new(ListAppointmentsV1Response)
	err := c.cc.Invoke(ctx, "/ova.recording.api.RecordingService/ListAppointmentsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingServiceClient) RemoveAppointmentV1(ctx context.Context, in *RemoveAppointmentV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.recording.api.RecordingService/RemoveAppointmentV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordingServiceServer is the server API for RecordingService service.
// All implementations must embed UnimplementedRecordingServiceServer
// for forward compatibility
type RecordingServiceServer interface {
	CreateAppointmentV1(context.Context, *CreateAppointmentV1Request) (*emptypb.Empty, error)
	DescribeAppointmentV1(context.Context, *DescribeAppointmentV1Request) (*Appointment, error)
	ListAppointmentsV1(context.Context, *ListAppointmentsV1Request) (*ListAppointmentsV1Response, error)
	RemoveAppointmentV1(context.Context, *RemoveAppointmentV1Request) (*emptypb.Empty, error)
	mustEmbedUnimplementedRecordingServiceServer()
}

// UnimplementedRecordingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordingServiceServer struct {
}

func (UnimplementedRecordingServiceServer) CreateAppointmentV1(context.Context, *CreateAppointmentV1Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointmentV1 not implemented")
}
func (UnimplementedRecordingServiceServer) DescribeAppointmentV1(context.Context, *DescribeAppointmentV1Request) (*Appointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAppointmentV1 not implemented")
}
func (UnimplementedRecordingServiceServer) ListAppointmentsV1(context.Context, *ListAppointmentsV1Request) (*ListAppointmentsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppointmentsV1 not implemented")
}
func (UnimplementedRecordingServiceServer) RemoveAppointmentV1(context.Context, *RemoveAppointmentV1Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAppointmentV1 not implemented")
}
func (UnimplementedRecordingServiceServer) mustEmbedUnimplementedRecordingServiceServer() {}

// UnsafeRecordingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordingServiceServer will
// result in compilation errors.
type UnsafeRecordingServiceServer interface {
	mustEmbedUnimplementedRecordingServiceServer()
}

func RegisterRecordingServiceServer(s grpc.ServiceRegistrar, srv RecordingServiceServer) {
	s.RegisterService(&RecordingService_ServiceDesc, srv)
}

func _RecordingService_CreateAppointmentV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingServiceServer).CreateAppointmentV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.recording.api.RecordingService/CreateAppointmentV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingServiceServer).CreateAppointmentV1(ctx, req.(*CreateAppointmentV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingService_DescribeAppointmentV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAppointmentV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingServiceServer).DescribeAppointmentV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.recording.api.RecordingService/DescribeAppointmentV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingServiceServer).DescribeAppointmentV1(ctx, req.(*DescribeAppointmentV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingService_ListAppointmentsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppointmentsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingServiceServer).ListAppointmentsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.recording.api.RecordingService/ListAppointmentsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingServiceServer).ListAppointmentsV1(ctx, req.(*ListAppointmentsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingService_RemoveAppointmentV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAppointmentV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingServiceServer).RemoveAppointmentV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.recording.api.RecordingService/RemoveAppointmentV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingServiceServer).RemoveAppointmentV1(ctx, req.(*RemoveAppointmentV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordingService_ServiceDesc is the grpc.ServiceDesc for RecordingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.recording.api.RecordingService",
	HandlerType: (*RecordingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppointmentV1",
			Handler:    _RecordingService_CreateAppointmentV1_Handler,
		},
		{
			MethodName: "DescribeAppointmentV1",
			Handler:    _RecordingService_DescribeAppointmentV1_Handler,
		},
		{
			MethodName: "ListAppointmentsV1",
			Handler:    _RecordingService_ListAppointmentsV1_Handler,
		},
		{
			MethodName: "RemoveAppointmentV1",
			Handler:    _RecordingService_RemoveAppointmentV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
